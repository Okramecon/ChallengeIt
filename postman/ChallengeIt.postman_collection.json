{
	"info": {
		"_postman_id": "57714ceb-9549-4471-bf3c-98b20e3bf40d",
		"name": "ChallengeIt",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29753886"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseStatus = pm.response.code;\r",
									"\r",
									"if (responseStatus >= 200 && responseStatus < 300)\r",
									"{\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set(\"access_token\", jsonData.accessToken)\r",
									"    pm.environment.set(\"refresh_token\", jsonData.refreshToken)\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Username\": \"Malika41\",\r\n    \"Email\": \"\",\r\n    \"Password\": \"123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}api/auth",
							"host": [
								"{{host}}api"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "refresh token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseStatus = pm.response.code;\r",
									"\r",
									"if (responseStatus >= 200 && responseStatus < 300)\r",
									"{\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set(\"access_token\", jsonData.accessToken)\r",
									"    pm.environment.set(\"refresh_token\", jsonData.refreshToken)\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\" : \"{{refresh_token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}api/auth/refresh",
							"host": [
								"{{host}}api"
							],
							"path": [
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "create user",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{$randomUserName}}\",\r\n  \"password\": \"123\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"fIrstName\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}api/users",
							"host": [
								"{{host}}api"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "get current user information",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}api/users/information",
							"host": [
								"{{host}}api"
							],
							"path": [
								"users",
								"information"
							]
						}
					},
					"response": []
				},
				{
					"name": "find user by username",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}api/users/find?searchString=malik",
							"host": [
								"{{host}}api"
							],
							"path": [
								"users",
								"find"
							],
							"query": [
								{
									"key": "searchString",
									"value": "malik"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Challenges",
			"item": [
				{
					"name": "create challenge for current user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.environment.set('current_date', moment().utc().format(\"YYYY-MM-DDTHH:mm:ss\"));\r",
									"\r",
									"const numberOfDaysToAdd = 21;\r",
									"const endDate = moment().utc().add(numberOfDaysToAdd, 'days').format(\"YYYY-MM-DDTHH:mm:ss\");\r",
									"\r",
									"pm.environment.set('end_date', endDate);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{$randomLoremWords}}\",\r\n    \"startDate\": \"{{current_date}}\",\r\n    \"endDate\": \"{{end_date}}\",\r\n    \"betAmount\": 100,\r\n    \"schedule\": [\r\n        \"2025-01-04\",\r\n        \"2025-01-04\",\r\n        \"2025-01-05\",\r\n        \"2025-01-06\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}api/challenges",
							"host": [
								"{{host}}api"
							],
							"path": [
								"challenges"
							]
						}
					},
					"response": []
				},
				{
					"name": "update challenge data",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"cc61938c-f6c8-4d95-880f-9059dd2f51d6\",\r\n  \"title\": \"{{$randomWords}} changed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}api/challenges",
							"host": [
								"{{host}}api"
							],
							"path": [
								"challenges"
							]
						}
					},
					"response": []
				},
				{
					"name": "get current user challenges",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}api/challenges/my?pageNumber=1&pageSize=30",
							"host": [
								"{{host}}api"
							],
							"path": [
								"challenges",
								"my"
							],
							"query": [
								{
									"key": "pageNumber",
									"value": "1",
									"description": "Default value 1"
								},
								{
									"key": "pageSize",
									"value": "30",
									"description": "Default value 1000"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"if (pm.response.code === 401) {\r",
					"    // Retry the request after refreshing the token\r",
					"    pm.sendRequest({\r",
					"        url: pm.environment.get(\"host\") + \"api/auth/refresh\",\r",
					"        method: \"POST\",\r",
					"        header: {\r",
					"            \"Content-Type\": \"application/json\",\r",
					"            \"Authorization\": \"Bearer \" + pm.environment.get(\"access_token\")\r",
					"        },\r",
					"        body: {\r",
					"            mode: \"raw\",\r",
					"            raw: JSON.stringify({\r",
					"                accessToken: pm.environment.get(\"access_token\"),\r",
					"                refreshToken: pm.environment.get(\"refresh_token\")\r",
					"            })\r",
					"        }\r",
					"    }, function (err, response) {\r",
					"        if (!err && response.code === 200) {\r",
					"            // Parse the new access token and refresh token\r",
					"\r",
					"            var jsonData = response.json();\r",
					"            pm.environment.set(\"access_token\", jsonData.accessToken);\r",
					"            pm.environment.set(\"refresh_token\", jsonData.refreshToken);\r",
					"\r",
					"            postman.setNextRequest(pm.info.requestName);\r",
					"        } else {\r",
					"            console.error(\"Failed to refresh token:\", err || response);\r",
					"        }\r",
					"    });\r",
					"} else {\r",
					"    console.log(\"Request successful, no need to refresh token.\");\r",
					"}\r",
					""
				]
			}
		}
	]
}